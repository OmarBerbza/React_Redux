{"ast":null,"code":"import axios from \"axios\";\nimport { createStore } from \"redux\";\nconst initialState = {\n  continents: [{\n    code: 'AF',\n    nom: 'Africa',\n    surface: 3e10,\n    avatar: 'https://media.istockphoto.com/id/817045128/vector/africa-map-colorful-orange-vector-illustration.jpg?s=612x612&w=0&k=20&c=DXx5sW3jQZyg9fbW1ep7wTGicfxnrS-c_FarBNbogqg=',\n    population: 34,\n    pays: [{\n      nom: 'Morocco',\n      population: 4e7,\n      capital: 'rabat',\n      indepYear: 2022,\n      image: ''\n    }]\n  }, {\n    code: 'EU',\n    nom: 'Europe',\n    surface: 3e20,\n    avatar: 'https://www.worldatlas.com/r/w2560-q80/upload/f3/53/df/europe-map.png',\n    population: 3e4,\n    pays: [{\n      nom: 'Spain',\n      population: 4e8,\n      capital: 'Madrid',\n      indepYear: 2022,\n      image: ''\n    }]\n  }]\n};\n\n// Q7\nasync function getContinents() {\n  // method 1\n  // axios.get(\"https://fakeapi.com/continents\").then(({data}) => {\n  //     store.dispatch({\n  //         type: 'remplirData',\n  //         payload: data,\n  //     })\n  // }).catch(e => console.log(e))\n\n  // method 2 \n  const {\n    data\n  } = await axios.get('https://fakeapi.com/continents');\n  store.dispatch({\n    type: 'remplirData',\n    payload: data\n  });\n  console.log('called');\n}\ngetContinents();\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'ajouterPays':\n      return {\n        ...state,\n        continents: state.continents.map(continent => {\n          if (continent.code === action.payload.cntCode) {\n            return {\n              ...continent,\n              // population: continent.population + action.payload.pays.population, hadi mo7al wach kayna\n              pays: [...continent.pays, action.payload.pays]\n            };\n          }\n          return continent;\n        })\n      };\n    case 'modifierPopulation':\n      return {\n        ...state,\n        continents: state.continents.map(continent => {\n          if (continent.code === action.payload.code) {\n            return {\n              ...continent,\n              population: action.payload.population\n            };\n          }\n          return continent;\n        })\n      };\n    case 'remplirData':\n      return {\n        ...state,\n        continents: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst store = createStore(reducer);\nexport default store;","map":{"version":3,"names":["axios","createStore","initialState","continents","code","nom","surface","avatar","population","pays","capital","indepYear","image","getContinents","data","get","store","dispatch","type","payload","console","log","reducer","state","action","map","continent","cntCode"],"sources":["C:/Users/omarb/OneDrive/Bureau/DEV 202/React/Exercice Redux/efm-casa/src/store.js"],"sourcesContent":["import axios from \"axios\";\nimport { createStore } from \"redux\";\n\nconst initialState = {\n     continents: [\n        {\n            code: 'AF',\n            nom: 'Africa',\n            surface: 3e10,\n            avatar: 'https://media.istockphoto.com/id/817045128/vector/africa-map-colorful-orange-vector-illustration.jpg?s=612x612&w=0&k=20&c=DXx5sW3jQZyg9fbW1ep7wTGicfxnrS-c_FarBNbogqg=',\n            population: 34,\n            pays: [\n                {\n                    nom: 'Morocco',\n                    population: 4e7,\n                    capital: 'rabat',\n                    indepYear: 2022,\n                    image: '',\n                }\n            ]\n        },\n        \n        {\n            code: 'EU',\n            nom: 'Europe',\n            surface: 3e20,\n            avatar: 'https://www.worldatlas.com/r/w2560-q80/upload/f3/53/df/europe-map.png',\n            population: 3e4,\n            pays: [\n                {\n                    nom: 'Spain',\n                    population: 4e8,\n                    capital: 'Madrid',\n                    indepYear: 2022,\n                    image: '',\n                }\n            ]\n        },\n    ]\n}\n\n// Q7\nasync function getContinents() {\n    // method 1\n    // axios.get(\"https://fakeapi.com/continents\").then(({data}) => {\n    //     store.dispatch({\n    //         type: 'remplirData',\n    //         payload: data,\n    //     })\n    // }).catch(e => console.log(e))\n\n    // method 2 \n    const { data } = await axios.get('https://fakeapi.com/continents')\n    store.dispatch({\n        type: 'remplirData',\n        payload: data,\n    })\n    console.log('called')\n}\n\ngetContinents()\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'ajouterPays':\n            return {\n                ...state,\n                continents: state.continents.map((continent) => {\n                    if(continent.code === action.payload.cntCode) {\n                        return {\n                            ...continent,\n                            // population: continent.population + action.payload.pays.population, hadi mo7al wach kayna\n                            pays: [ ...continent.pays, action.payload.pays]\n                        }\n                    }\n                    return continent;\n                })\n            }\n        case 'modifierPopulation':\n            return {\n                ...state,\n                continents: state.continents.map((continent) => {\n                    if(continent.code === action.payload.code) {\n                        return {\n                            ...continent,\n                            population: action.payload.population,\n                        }\n                    }\n                    return continent\n                })\n            }\n        case 'remplirData':\n            return {\n                ...state,\n                continents: action.payload\n            }\n        \n        default: return state\n    }\n}\n\n\nconst store = createStore(reducer);\n\nexport default store;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,OAAO;AAEnC,MAAMC,YAAY,GAAG;EAChBC,UAAU,EAAE,CACT;IACIC,IAAI,EAAE,IAAI;IACVC,GAAG,EAAE,QAAQ;IACbC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,wKAAwK;IAChLC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,CACF;MACIJ,GAAG,EAAE,SAAS;MACdG,UAAU,EAAE,GAAG;MACfE,OAAO,EAAE,OAAO;MAChBC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE;IACX,CAAC;EAET,CAAC,EAED;IACIR,IAAI,EAAE,IAAI;IACVC,GAAG,EAAE,QAAQ;IACbC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,uEAAuE;IAC/EC,UAAU,EAAE,GAAG;IACfC,IAAI,EAAE,CACF;MACIJ,GAAG,EAAE,OAAO;MACZG,UAAU,EAAE,GAAG;MACfE,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE;IACX,CAAC;EAET,CAAC;AAET,CAAC;;AAED;AACA,eAAeC,aAAa,GAAG;EAC3B;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,gCAAgC,CAAC;EAClEC,KAAK,CAACC,QAAQ,CAAC;IACXC,IAAI,EAAE,aAAa;IACnBC,OAAO,EAAEL;EACb,CAAC,CAAC;EACFM,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;AACzB;AAEAR,aAAa,EAAE;AAEf,MAAMS,OAAO,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGrB,YAAY;EAAA,IAAEsB,MAAM;EACzC,QAAOA,MAAM,CAACN,IAAI;IACd,KAAK,aAAa;MACd,OAAO;QACH,GAAGK,KAAK;QACRpB,UAAU,EAAEoB,KAAK,CAACpB,UAAU,CAACsB,GAAG,CAAEC,SAAS,IAAK;UAC5C,IAAGA,SAAS,CAACtB,IAAI,KAAKoB,MAAM,CAACL,OAAO,CAACQ,OAAO,EAAE;YAC1C,OAAO;cACH,GAAGD,SAAS;cACZ;cACAjB,IAAI,EAAE,CAAE,GAAGiB,SAAS,CAACjB,IAAI,EAAEe,MAAM,CAACL,OAAO,CAACV,IAAI;YAClD,CAAC;UACL;UACA,OAAOiB,SAAS;QACpB,CAAC;MACL,CAAC;IACL,KAAK,oBAAoB;MACrB,OAAO;QACH,GAAGH,KAAK;QACRpB,UAAU,EAAEoB,KAAK,CAACpB,UAAU,CAACsB,GAAG,CAAEC,SAAS,IAAK;UAC5C,IAAGA,SAAS,CAACtB,IAAI,KAAKoB,MAAM,CAACL,OAAO,CAACf,IAAI,EAAE;YACvC,OAAO;cACH,GAAGsB,SAAS;cACZlB,UAAU,EAAEgB,MAAM,CAACL,OAAO,CAACX;YAC/B,CAAC;UACL;UACA,OAAOkB,SAAS;QACpB,CAAC;MACL,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACH,GAAGH,KAAK;QACRpB,UAAU,EAAEqB,MAAM,CAACL;MACvB,CAAC;IAEL;MAAS,OAAOI,KAAK;EAAA;AAE7B,CAAC;AAGD,MAAMP,KAAK,GAAGf,WAAW,CAACqB,OAAO,CAAC;AAElC,eAAeN,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}